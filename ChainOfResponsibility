//https://refactoring.guru/design-patterns/chain-of-responsibility/cpp/example#:~:text=Responsibility%20%2F%20C%2B%2B-,Chain%20of%20Responsibility%20in%20C%2B%2B,concrete%20classes%20of%20the%20receivers.
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class Handler
{
    public:
        virtual Handler* set_next(Handler* handler) = 0;
        virtual string Handle(string request) = 0;       
};

class DefaultHandler : public Handler
{
    private :
        Handler* next_handler;
    public :
        DefaultHandler()
        {
            this->next_handler = nullptr;
        }
        Handler* set_next(Handler* handler) override
        {
            cout << "set next handler " << endl;
            this->next_handler = handler;
            return handler;
        }
        
        string Handle(string request) override
        {
            cout << "call DefaultHandler " << endl;
            if(this->next_handler != nullptr)
                return this->next_handler->Handle(request);
        
            return {};
        }
    
};

class PackDepackhandler : public DefaultHandler
{
    public:
        string Handle(string request) override
        {
            cout << "Inside Handle of PackDepackhandler" << endl;
            if(request == "depack")
            {
                return "depack returning" + request + "\n";
            }
            else if(request == "pack")
            {
                return "pack returning" + request + "\n";
            } 
            else
            {
                return DefaultHandler::Handle(request);
            }
        }
};

class CodecHandler : public DefaultHandler
{
    public:
        string Handle(string request) override
        {
            cout << "Inside Handle of CodecHandler" << endl;
            if(request == "dec")
            {
                return "decoder returning" + request + "\n";
            }
            else if(request == "enc")
            {
                return "encoder returning" + request + "\n";
            }
            else
            {
                return DefaultHandler::Handle(request);
            }
        }
};

class ResamplerHandler : public DefaultHandler
{
    public:
        string Handle(string request) override
        {
            cout << "Inside Handle of ResamplerHandler" << endl;
            if(request == "res")
            {
                return "resampler returning" + request + "\n";
            }
            else
            {
                return DefaultHandler::Handle(request);
            }
        }
};

//client code
void TransCodeSessHandler(Handler& handler)
{
    //std::vector<string> mediaTrans = {"depack1"/*, "dec1", "res1", "enc1", "pack1"*/};
    std::vector<string> mediaTrans = {"depack", "dec", "res", "enc", "pack"};
    for(const string& transOper : mediaTrans)
    {
        cout << "try for string :" << transOper << "   " << endl;
        string result = handler.Handle(transOper);
        if(!result.empty())
            cout << "   " << result;
        else
            cout <<" not desired" << endl;
    }
}
int main()
{
    PackDepackhandler* packDepackhandler = new PackDepackhandler();
    CodecHandler* codechandler = new CodecHandler();
    ResamplerHandler* resamplerhandler = new ResamplerHandler();
    //if i include all 5 with set_next then it will go in infinite loop    
    packDepackhandler->set_next(codechandler)->set_next(resamplerhandler);//->set_next(codechandler)->set_next(packDepackhandler);

    cout << "curent chain is : depack ->dec->res->enc->pack" << endl;
    
    TransCodeSessHandler(*packDepackhandler);
    
    cout << endl;
    delete packDepackhandler;
    delete codechandler;
    delete resamplerhandler;
    
}
